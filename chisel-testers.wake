
def buildDir = mkdir "build/chisel-iotesters"

def scalacOpts = "-deprecation", "-feature", Nil

# We ignore scalaVersion because it comes from ScalaModule
# The scalaVersion in ivydependencies.json is purely for fetching
def macrosParadiseIvyDep =
  def extractIvyDep json =
    json // `macrosParadise` // `dependencies` | getJString
    | omapPartial stringToIvyDep
    | getOrFail (makeError "macrosParadise ivy dependency not found!")
  readIvyDepsJSON here
  | rmapPass extractIvyDep


global def chiselIotestersVersion = "v1.3.0"

def buildInfo ver =
  def content =
    "package chisel3.iotesters\n"
    , "import scala.Predef._\n"
    , "/** This object was generated by chisel3-wake */"
    , "case object BuildInfo \{"
    , "  val buildInfoPackage: String = \"chisel3\""
    , "  val version: String = \"{chiselIotestersVersion}\""
    , "  val scalaVersion: String = \"{ver.scalaVersionToString}\""
    , "  override val toString: String ="
    , "    s\"buildInfoPackage: $buildInfoPackage, version: $version, scalaVersion: $scalaVersion\""
    , "\}"
    , Nil
  def outDir = mkdir "{buildDir.getPathName}/buildInfo"
  def outFile = "{outDir.getPathName}/BuildInfo.scala"
  write outFile (content | catWith "\n")

global def chiselIotestersScalaModule =
  def base =
    makeScalaModuleFromJSON here "chisel-testers"
    | setScalaModuleRootDir "chisel-testers"
    | setScalaModuleDeps (chisel3ScalaModule, treadleScalaModule, firrtlInterpreterScalaModule, Nil)
    | setScalaModuleScalacOptions scalacOpts
  def genSrcs Unit = buildInfo base.getScalaModuleScalaVersion, Nil
  base
  | setScalaModuleFnGeneratedSources genSrcs

def reportScalaTest report job =
  def printReport paths =
    def reports = paths | filter (_.getPathName ==~ report)
    match reports
      report, Nil =
        def res = read report
        def _ = rmap println res
        Pass "Success!"
      # Nil suggests that ScalaTest didn't run
      Nil = match paths
        bad, Nil if bad.getPathError.isSome =
          match bad.getPathError
            Some err = Fail err
            None     = job.getJobStderr
        x = Fail "Something has gone horribly wrong".makeError
      x           = Fail "Ran Scala Test expected exactly 1 report, got {format x}".makeError

  match job.getJobOutputs
    Nil = job.getJobStderr
    output, Nil if output.getPathError.isSome =
      printReport job.getJobFailedOutputs
      | rmapPass (\_ Fail "ScalaTest {report} failed!".makeError)
    one, Nil = panic "bad"
    outputs = printReport outputs

global def runScalaTestWithOpt module tester options=
  def report = "test.report.txt"
  def cmd = match (head options)
    None = runJava module.scalaModuleClasspath "org.scalatest.tools.Runner" ("-f", report, "-s", tester, Nil) Nil
    _ = runJava module.scalaModuleClasspath "org.scalatest.tools.Runner" (("-f", report, "-s", tester, Nil) ++ options) Nil
  cmd | reportScalaTest report

global def makeScalaTestModule name root version =
  makeScalaModule name root version
  | editScalaModuleDeps (chiselIotestersScalaModule, chiselIotesters2ScalaModule, _)
  | setScalaModuleSourceDirs ("src/test/scala", Nil)
  | setScalaModuleResourceDirs ("src/test/resources", Nil)

global def runScalaTestSuite module tester=
  runScalaTestWithOpt module tester (Nil)

global def runScalaTest module tester test=
  runScalaTestWithOpt module tester ("-z", test, Nil)
